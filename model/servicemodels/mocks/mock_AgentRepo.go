// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	datamodels "ai-agent/model/datamodels"

	mock "github.com/stretchr/testify/mock"
)

// MockAgentRepo is an autogenerated mock type for the AgentRepo type
type MockAgentRepo struct {
	mock.Mock
}

type MockAgentRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAgentRepo) EXPECT() *MockAgentRepo_Expecter {
	return &MockAgentRepo_Expecter{mock: &_m.Mock}
}

// GetUserHistory provides a mock function with given fields: id
func (_m *MockAgentRepo) GetUserHistory(id string) ([]datamodels.HistoryContext, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserHistory")
	}

	var r0 []datamodels.HistoryContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]datamodels.HistoryContext, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) []datamodels.HistoryContext); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datamodels.HistoryContext)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAgentRepo_GetUserHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserHistory'
type MockAgentRepo_GetUserHistory_Call struct {
	*mock.Call
}

// GetUserHistory is a helper method to define mock.On call
//   - id string
func (_e *MockAgentRepo_Expecter) GetUserHistory(id interface{}) *MockAgentRepo_GetUserHistory_Call {
	return &MockAgentRepo_GetUserHistory_Call{Call: _e.mock.On("GetUserHistory", id)}
}

func (_c *MockAgentRepo_GetUserHistory_Call) Run(run func(id string)) *MockAgentRepo_GetUserHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAgentRepo_GetUserHistory_Call) Return(_a0 []datamodels.HistoryContext, _a1 error) *MockAgentRepo_GetUserHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAgentRepo_GetUserHistory_Call) RunAndReturn(run func(string) ([]datamodels.HistoryContext, error)) *MockAgentRepo_GetUserHistory_Call {
	_c.Call.Return(run)
	return _c
}

// StoreConversation provides a mock function with given fields: userID, history
func (_m *MockAgentRepo) StoreConversation(userID string, history *datamodels.HistoryContext) error {
	ret := _m.Called(userID, history)

	if len(ret) == 0 {
		panic("no return value specified for StoreConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *datamodels.HistoryContext) error); ok {
		r0 = rf(userID, history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAgentRepo_StoreConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreConversation'
type MockAgentRepo_StoreConversation_Call struct {
	*mock.Call
}

// StoreConversation is a helper method to define mock.On call
//   - userID string
//   - history *datamodels.HistoryContext
func (_e *MockAgentRepo_Expecter) StoreConversation(userID interface{}, history interface{}) *MockAgentRepo_StoreConversation_Call {
	return &MockAgentRepo_StoreConversation_Call{Call: _e.mock.On("StoreConversation", userID, history)}
}

func (_c *MockAgentRepo_StoreConversation_Call) Run(run func(userID string, history *datamodels.HistoryContext)) *MockAgentRepo_StoreConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*datamodels.HistoryContext))
	})
	return _c
}

func (_c *MockAgentRepo_StoreConversation_Call) Return(_a0 error) *MockAgentRepo_StoreConversation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAgentRepo_StoreConversation_Call) RunAndReturn(run func(string, *datamodels.HistoryContext) error) *MockAgentRepo_StoreConversation_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAgentRepo creates a new instance of MockAgentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAgentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAgentRepo {
	mock := &MockAgentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
