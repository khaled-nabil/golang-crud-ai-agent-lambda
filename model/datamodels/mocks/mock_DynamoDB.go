// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	datamodels "ai-agent/model/datamodels"

	mock "github.com/stretchr/testify/mock"
)

// MockDynamoDB is an autogenerated mock type for the DynamoDB type
type MockDynamoDB struct {
	mock.Mock
}

type MockDynamoDB_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoDB) EXPECT() *MockDynamoDB_Expecter {
	return &MockDynamoDB_Expecter{mock: &_m.Mock}
}

// RetrieveItems provides a mock function with given fields: id, limit
func (_m *MockDynamoDB) RetrieveItems(id string, limit int32) ([]datamodels.HistoryContext, error) {
	ret := _m.Called(id, limit)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveItems")
	}

	var r0 []datamodels.HistoryContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32) ([]datamodels.HistoryContext, error)); ok {
		return rf(id, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int32) []datamodels.HistoryContext); ok {
		r0 = rf(id, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datamodels.HistoryContext)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(id, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDynamoDB_RetrieveItems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveItems'
type MockDynamoDB_RetrieveItems_Call struct {
	*mock.Call
}

// RetrieveItems is a helper method to define mock.On call
//   - id string
//   - limit int32
func (_e *MockDynamoDB_Expecter) RetrieveItems(id interface{}, limit interface{}) *MockDynamoDB_RetrieveItems_Call {
	return &MockDynamoDB_RetrieveItems_Call{Call: _e.mock.On("RetrieveItems", id, limit)}
}

func (_c *MockDynamoDB_RetrieveItems_Call) Run(run func(id string, limit int32)) *MockDynamoDB_RetrieveItems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int32))
	})
	return _c
}

func (_c *MockDynamoDB_RetrieveItems_Call) Return(_a0 []datamodels.HistoryContext, _a1 error) *MockDynamoDB_RetrieveItems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDB_RetrieveItems_Call) RunAndReturn(run func(string, int32) ([]datamodels.HistoryContext, error)) *MockDynamoDB_RetrieveItems_Call {
	_c.Call.Return(run)
	return _c
}

// StoreItem provides a mock function with given fields: item
func (_m *MockDynamoDB) StoreItem(item interface{}) error {
	ret := _m.Called(item)

	if len(ret) == 0 {
		panic("no return value specified for StoreItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDynamoDB_StoreItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreItem'
type MockDynamoDB_StoreItem_Call struct {
	*mock.Call
}

// StoreItem is a helper method to define mock.On call
//   - item interface{}
func (_e *MockDynamoDB_Expecter) StoreItem(item interface{}) *MockDynamoDB_StoreItem_Call {
	return &MockDynamoDB_StoreItem_Call{Call: _e.mock.On("StoreItem", item)}
}

func (_c *MockDynamoDB_StoreItem_Call) Run(run func(item interface{})) *MockDynamoDB_StoreItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockDynamoDB_StoreItem_Call) Return(_a0 error) *MockDynamoDB_StoreItem_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDynamoDB_StoreItem_Call) RunAndReturn(run func(interface{}) error) *MockDynamoDB_StoreItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamoDB creates a new instance of MockDynamoDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoDB {
	mock := &MockDynamoDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
