// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	datamodels "ai-agent/model/datamodels"

	mock "github.com/stretchr/testify/mock"
)

// MockGemini is an autogenerated mock type for the Gemini type
type MockGemini struct {
	mock.Mock
}

type MockGemini_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGemini) EXPECT() *MockGemini_Expecter {
	return &MockGemini_Expecter{mock: &_m.Mock}
}

// Chat provides a mock function with given fields: userInput, h
func (_m *MockGemini) Chat(userInput string, h []datamodels.HistoryContext) (*datamodels.HistoryContext, error) {
	ret := _m.Called(userInput, h)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *datamodels.HistoryContext
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []datamodels.HistoryContext) (*datamodels.HistoryContext, error)); ok {
		return rf(userInput, h)
	}
	if rf, ok := ret.Get(0).(func(string, []datamodels.HistoryContext) *datamodels.HistoryContext); ok {
		r0 = rf(userInput, h)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datamodels.HistoryContext)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []datamodels.HistoryContext) error); ok {
		r1 = rf(userInput, h)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGemini_Chat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Chat'
type MockGemini_Chat_Call struct {
	*mock.Call
}

// Chat is a helper method to define mock.On call
//   - userInput string
//   - h []datamodels.HistoryContext
func (_e *MockGemini_Expecter) Chat(userInput interface{}, h interface{}) *MockGemini_Chat_Call {
	return &MockGemini_Chat_Call{Call: _e.mock.On("Chat", userInput, h)}
}

func (_c *MockGemini_Chat_Call) Run(run func(userInput string, h []datamodels.HistoryContext)) *MockGemini_Chat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]datamodels.HistoryContext))
	})
	return _c
}

func (_c *MockGemini_Chat_Call) Return(_a0 *datamodels.HistoryContext, _a1 error) *MockGemini_Chat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGemini_Chat_Call) RunAndReturn(run func(string, []datamodels.HistoryContext) (*datamodels.HistoryContext, error)) *MockGemini_Chat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGemini creates a new instance of MockGemini. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGemini(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGemini {
	mock := &MockGemini{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
