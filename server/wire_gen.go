// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"ai-agent/controller/agentcontroller"
	"ai-agent/controller/healthcontroller"
	"ai-agent/model/datamodels"
	"ai-agent/model/servicemodels"
	"ai-agent/pkg/dynamodbpkg"
	"ai-agent/pkg/geminipkg"
	"ai-agent/pkg/secretspkg"
	"ai-agent/repositories/chatpersistance"
	"ai-agent/router"
	"ai-agent/service/aiagent"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"os"
)

// Injectors from Wire.go:

func InitializeServer() (*Server, error) {
	engine := NewGinEngine()
	controller := healthcontroller.New()
	appConfig, err := secretspkg.New()
	if err != nil {
		return nil, err
	}
	gemini, err := geminipkg.New(appConfig)
	if err != nil {
		return nil, err
	}
	dynamoDB, err := dynamodbpkg.New()
	if err != nil {
		return nil, err
	}
	repo := chatpersistance.New(dynamoDB)
	service := aiagent.New(gemini, repo)
	agentcontrollerController := agentcontroller.New(service)
	routerRouter := router.New(engine, controller, agentcontrollerController)
	server := New(engine, routerRouter)
	return server, nil
}

// Wire.go:

func NewGinEngine() *gin.Engine {
	gin.SetMode(os.Getenv("GIN_MODE"))

	return gin.New()
}

var ProviderSet = wire.NewSet(wire.Bind(new(datamodels.Gemini), new(*geminipkg.Gemini)), wire.Bind(new(datamodels.DynamoDB), new(*dynamodbpkg.DynamoDB)), wire.Bind(new(servicemodels.AgentService), new(*aiagent.Service)), wire.Bind(new(servicemodels.AgentRepo), new(*chatpersistance.Repo)), NewGinEngine,
	New, healthcontroller.New, agentcontroller.New, router.New, geminipkg.New, secretspkg.New, aiagent.New, dynamodbpkg.New, chatpersistance.New,
)
